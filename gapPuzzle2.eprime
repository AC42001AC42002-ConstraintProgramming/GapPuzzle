language ESSENCE' 1.0

$ @todo Prevent user from entering value greater than 7 (via a first contraint)?
$ @todo length must be greater than 1
$ @todo check "where"

given length : int(1..)
given xGaps : matrix indexed by [int(1..length)] of int(1..)
given yGaps : matrix indexed by [int(1..length)] of int(1..)

$ @todo Is it possible to find a list of points?
find m : matrix indexed by [int(1..length), int(1..length)] of int(0..1)

such that

$2 squares per index
forAll index : int(1..length).
  sum(m[.., index]) = 2 /\ sum(m[index, ..]) = 2

$ $ @todo Not very efficient as everything
$ check NS, EW, NW, NE
$ forAll x : int(0..length - 1) .
$   forAll y : int(0..length - 1) .
$     forAll xGap : int(x - xGaps[x]..x + xGaps[x]) .
$       (x != xGap /\ xGap >= 1 /\ xGap < length) ->
$         m[xGap, y] = 0